<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
          <collectionProp name="HeaderManager.headers"/>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments">
            <elementProp name="BaseURL" elementType="Argument">
              <stringProp name="Argument.name">BaseURL</stringProp>
              <stringProp name="Argument.value">jsonplaceholder.typicode.com</stringProp>
              <stringProp name="Argument.desc">This is the base url used to login to the application.</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TOdoPath" elementType="Argument">
              <stringProp name="Argument.name">TOdoPath</stringProp>
              <stringProp name="Argument.value">/todos</stringProp>
              <stringProp name="Argument.desc">Path to the ToDo endpoint</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="https" elementType="Argument">
              <stringProp name="Argument.name">https</stringProp>
              <stringProp name="Argument.value">https</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="NoofData`" elementType="Argument">
              <stringProp name="Argument.name">NoofData`</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="GetFilename" elementType="Argument">
              <stringProp name="Argument.name">GetFilename</stringProp>
              <stringProp name="Argument.value">GET_response.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PostFileName" elementType="Argument">
              <stringProp name="Argument.name">PostFileName</stringProp>
              <stringProp name="Argument.value">POST_Request.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FilePath" elementType="Argument">
              <stringProp name="Argument.name">FilePath</stringProp>
              <stringProp name="Argument.value">../../JsonResult/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="GET"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1. [GET} Todo Get">
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${TOdoPath}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">25</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Saving result to JSON">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.nio.file.Files
import java.nio.file.Paths

// Define the path to the output file
def filePath = &quot;${FilePath}&quot;+&quot;${GetFilename}&quot;

// Retrieve the response data from the previous sampler
def responseData = prev.getResponseDataAsString()

// Optionally, parse the response data as JSON (if it&apos;s a valid JSON string)
def jsonSlurper = new JsonSlurper()
def jsonResponse = jsonSlurper.parseText(responseData)

// Convert JSON response to a formatted JSON string
def formattedJson = JsonOutput.prettyPrint(JsonOutput.toJson(jsonResponse))

// Save the formatted JSON to a file
def file = new File(filePath)
file.write(formattedJson)

log.info(&quot;JSON response saved to ${filePath}&quot;)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Modifying file">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import org.apache.jmeter.util.JMeterUtils

// Fetch the JSON response
def filePath = &quot;${FilePath}&quot;+&quot;${GetFilename}&quot;

// Read the saved JSON file
def file = new File(filePath)
if (!file.exists()) {
    log.error(&quot;File ${filePath} does not exist.&quot;)
    return
}

// Parse the JSON
def jsonText = file.text
def jsonSlurper = new JsonSlurper()
def jsonData = jsonSlurper.parseText(jsonText)
log.info(jsonText)


// Modify the JSON
jsonData.each { item -&gt;
    if (item.userId % 2 != 0 &amp;&amp; item.id % 2 == 0) {
        item.completed = !item.completed
    }
}

// Convert the modified JSON back to string
def updatedJsonText = JsonOutput.prettyPrint(JsonOutput.toJson(jsonData))

// Save the updated JSON to a file
def file1 = new File(&quot;${FilePath}&quot;+&quot;${PostFileName}&quot;)
file1.write(updatedJsonText)

// Log message
log.info(&quot;JSON modification complete.&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="POST"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2. [POST} Todo POST">
            <stringProp name="HTTPSampler.domain">jsonplaceholder.typicode.com</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/todos</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="JsonResult/POST_Request.json" elementType="HTTPFileArg">
                  <stringProp name="File.mimetype">application/json</stringProp>
                  <stringProp name="File.path">JsonResult/POST_Request.json</stringProp>
                  <stringProp name="File.paramname"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput

// Define the path to your JSON file
def jsonFilePath = &quot;${FilePath}&quot;+&quot;${PostFileName}&quot;

// Load and parse the expected JSON data from file
def jsonFile = new File(jsonFilePath)
def jsonSlurper = new JsonSlurper()
def expectedData = jsonSlurper.parseText(jsonFile.text)

// Get the response data from the HTTP Request
def responseData = prev.getResponseDataAsString()

// Parse the response data (assuming it&apos;s in JSON format)
def actualData = jsonSlurper.parseText(responseData)
def listData = actualData.collect { key, value -&gt; value }
def cleanedData = listData.findAll { item -&gt;
    item instanceof Map
    }

// Convert both expected and actual data to JSON strings for comparison
def expectedJsonString = JsonOutput.toJson(expectedData)
def actualJsonString = JsonOutput.toJson(cleanedData)

// Assert that the expected and actual JSON data are the same
if (expectedJsonString != actualJsonString) {
    AssertionError assertionError = new AssertionError(&quot;Expected data does not match actual data.\nExpected: ${expectedJsonString}\nActual: ${actualJsonString}&quot;)
    log.error(assertionError.message)
    throw assertionError
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
